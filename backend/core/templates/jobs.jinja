{% extends "base.jinja" %}

{% block heading %}
    Jobs
{% endblock %}

{% block head %}
<style>
  /* Add some spacing between categories */
  .category {
    margin-bottom: 20px;
  }

  /* Flex container for buttons to align them in one row */
  .button-group {
    display: flex;
    gap: 10px; /* Optional: adds spacing between buttons */
    flex-wrap: wrap; /* Ensures buttons wrap nicely on smaller screens */
  }
</style>
{% endblock %}

{% block content %}
    <div>
        <!-- <form method="POST">
            {% if photon_active %}
            <h3>Reverse Geocoding</h3><br>
            <button type="submit" name="newJob" value="photon_full" title="Query Photon to reverse geocode, and overwrite any existing records" >Geocode all points</button>
            {# <button type="submit" name="newJob" value="reset_no_geocoding">Reset points without geocoding</button> #}
            <button type="submit" name="newJob" value="photon_fill" title="Only query points which havent yet been reverse geocoded">Geocode new points</button>
            <br>
            {% endif %}
            <h3>Statistics</h3><br>
            <button type="submit" name="newJob" value="full_stats">Generate Statistics</button>
            <button type="submit" name="newJob" value="speed_data">Generate Speed Data</button>
            <br>
            <h3>Data Cleaning</h3><br>
            <button type="submit" name="newJob" value="delete_duplicates">Delete Duplicates</button>
        </form>
        &nbsp;
        <button type="submit" name="newJob" value="filter_accuracy" onclick="startFilterAccuracyJob()" title="Will ask for a number input first">Filter Large Accuracy</button>
        &nbsp;
        <button type="submit" name="newJob" value="filter_clusters" onclick="startFilterclustersJob()" title="Will ask for a number input first">Reduce Clusters</button> #}
        -->

        {% if photon_active %}
        <div class="category">
            <h4>Reverse Geocoding</h4>
            <div class="button-group">
                <button onclick="startJob('photon_full')" title="Query Photon to reverse geocode, and overwrite any existing records">Geocode all points</button>
                <button onclick="startJob('photon_fill')" title="Only query points which havent yet been reverse geocoded">Geocode new points</button>
            </div>
        </div>
        {% endif %}

        <div class="category">
            <h4>Statistics</h4>
            <div class="button-group">
                <button onclick="startJob('full_stats')">Generate Statistics</button>
                <button onclick="startJob('speed_data')">Generate Speed Data</button>
            </div>
        </div>

        <div class="category">
            <h4>Data Cleaning</h4>
            <div class="button-group">
                <button onclick="startJob('delete_duplicates')">Delete Duplicates</button>
                <button onclick="startJob('filter_accuracy', 'Enter the maximum meter accuracy that should be allowed in the dataset', 'maximum_accuracy', '500')">Filter Large Accuracy</button>
                <button onclick="startJob('filter_clusters', 'Enter the minimum distance between points that is allowed in the dataset', 'maximum_distance', '14')">Reduce Clusters</button>
            </div>
        </div>
    </div>


    <br>
    <h2>Jobs</h2>
    <table border="1" cellpadding="5" cellspacing="0">
        <thead>
            <tr>
                <th>Job Name</th>
                <th>Running</th>
                <th>Progress</th>
                <th>Time Elapsed</th>
                <th>Time Remaining</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="jobs-tbody">
            {% for job in jobs %}
                <tr>
                    <td>{{ job[1] }}</td>
                    <td>{{ job[2] }}</td>
                    <td>{{ job[3]|round(2) }}%</td>
                    <td>{{ job[4] }}</td>
                    <td>{{ job[5] }}</td>
                    <td>
                        <form method="POST" style="display:inline;">
                            <input type="hidden" name="cancelJob" value="{{ job[0] }}">
                            <button type="submit">Cancel</button>
                        </form>
                    </td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <br>

    <!-- Toggle button to enable or disable auto refresh -->
    <button id="toggle-refresh">Disable Auto Refresh</button>
    
    <script>
    let refreshEnabled = true;
    const toggleBtn = document.getElementById("toggle-refresh");
    const tbody = document.getElementById("jobs-tbody");

    toggleBtn.addEventListener("click", function() {
        refreshEnabled = !refreshEnabled;
        this.textContent = refreshEnabled ? "Disable Auto Refresh" : "Enable Auto Refresh";
    });

    function autoRefresh() {
        if (!refreshEnabled) return;

        // Fetch updated job data from the server
        fetch(window.location.pathname + "?update=1")
            .then(response => response.json())
            .then(data => {
                // data is a list of jobs in the same format as `jobs` from the server
                updateJobsTable(data);
            })
            .catch(error => console.error("Error fetching jobs update:", error));
    }

    function updateJobsTable(jobs) {
        // Clear existing rows
        tbody.innerHTML = "";

        // Build rows from the updated job data
        for (let job of jobs) {
            const [ jobId, jobName, running, progress, timePassed, timeLeft ] = job;
            const row = document.createElement("tr");
            
            // Job Name
            const nameCell = document.createElement("td");
            nameCell.textContent = jobName;
            row.appendChild(nameCell);

            // Running?
            const runningCell = document.createElement("td");
            runningCell.textContent = running;
            row.appendChild(runningCell);

            // Progress
            const progressCell = document.createElement("td");
            progressCell.textContent = progress.toFixed(2) + "%";
            row.appendChild(progressCell);

            // Time Elapsed
            const timePassedCell = document.createElement("td");
            timePassedCell.textContent = timePassed; // e.g. "00:05:12" or "1d 03:12:45"
            row.appendChild(timePassedCell);

            // Time Remaining
            const timeLeftCell = document.createElement("td");
            timeLeftCell.textContent = timeLeft;
            row.appendChild(timeLeftCell);

            // Actions (Cancel Form)
            const actionsCell = document.createElement("td");
            const cancelForm = document.createElement("form");
            cancelForm.method = "POST";
            cancelForm.style.display = "inline";

            const hiddenInput = document.createElement("input");
            hiddenInput.type = "hidden";
            hiddenInput.name = "cancelJob";
            hiddenInput.value = jobId;
            cancelForm.appendChild(hiddenInput);

            const cancelButton = document.createElement("button");
            cancelButton.type = "submit";
            cancelButton.textContent = "Cancel";
            cancelForm.appendChild(cancelButton);

            actionsCell.appendChild(cancelForm);
            row.appendChild(actionsCell);

            tbody.appendChild(row);
        }
    }

    // Refresh the table every 1 second (only if refresh is enabled)
    setInterval(autoRefresh, 1000);



    function startJob(jobName, promptText = null, varName = null, defaultValue = null) {
        if (promptText !== null) {
            const value = prompt(promptText, defaultValue);
            if (value === null) {
                return;
            }

            fetch(window.location.pathname, {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                body: `newJob=${jobName}&${varName}=${value}`,
            })
                .then(response => response.json())
                .then(data => {
                    // data is a list of jobs in the same format as `jobs` from the server
                    updateJobsTable(data);
                })
                .catch(error => console.error(`Error starting ${jobName} job:`, error));
        } else {
            fetch(window.location.pathname, {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded",
                },
                body: `newJob=${jobName}`,
            })
                .then(response => response.json())
                .then(data => {
                    // data is a list of jobs in the same format as `jobs` from the server
                    updateJobsTable(data);
                })
                .catch(error => console.error(`Error starting ${jobName} job:`, error));
        }
    }

{# 
    function startFilterAccuracyJob() {
        // ask the user for a meter value
        const meterValue = prompt("Enter the maximum meter accuracy that should be allowed in the dataset", "500");
        if (meterValue === null) {
            return;
        }

        // start a POST request to the server to start the job
        fetch(window.location.pathname, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: `newJob=filter_accuracy&maximum_accuracy=${meterValue}`,
        })
            .then(response => response.json())
            .then(data => {
                // data is a list of jobs in the same format as `jobs` from the server
                updateJobsTable(data);
            })
            .catch(error => console.error("Error starting filter accuracy job:", error));
    }

    function startFilterclustersJob() {
        // ask the user for a cluster value
        const clusterValue = prompt("Enter the minimum distance between points that is allowed in the dataset", "14");
        if (clusterValue === null) {
            return;
        }

        // start a POST request to the server to start the job
        fetch(window.location.pathname, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: `newJob=filter_clusters&maximum_distance=${clusterValue}`,
        })
            .then(response => response.json())
            .then(data => {
                // data is a list of jobs in the same format as `jobs` from the server
                updateJobsTable(data);
            })
            .catch(error => console.error("Error starting filter clusters job:", error));
    } #}


    </script>
{% endblock %}
