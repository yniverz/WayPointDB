{% extends "base.jinja" %}

{% block heading %}
GPS Map
{% endblock %}

{% block head %}
<!-- Leaflet.js CSS & JS -->
<link rel="stylesheet" href="/static/css/leaflet.css" />
<link rel="stylesheet" href="/static/css/leaflet.fullscreen.css" />
<script src="/static/js/leaflet.js"></script>
<script src="/static/js/leaflet.fullscreen.js"></script>
<script src="/static/js/leaflet-heat.js"></script>

<style>
    #map {
        height: 600px;
        width: 100%;
        position: relative;
    }

    .loading-spinner-text {
        position: absolute;
        top: 45%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: none;
        color: #2c2c2c;
        z-index: 1000;
    }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        display: none;
        z-index: 1000;
    }

    @keyframes spin {
        0% { transform: translate(-50%, -50%) rotate(0deg); }
        100% { transform: translate(-50%, -50%) rotate(360deg); }
    }

    .date-selector {
        margin-bottom: 10px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }
    .date-selector button, .date-selector input {
        flex: 1 1 auto;
        min-width: 100px;
    }

    /* Specifically override styling for our << and >> buttons */
    .arrow-button {
        flex: 0 0 auto !important;
        width: auto !important;
        min-width: auto !important;
    }

    /* Simple "legend" or control area in the top-right corner */
    .map-legend {
        color: #333;
        background: rgba(255, 255, 255, 0.8);
        padding: 8px 12px;
    }
    
    .calendar-popup-button {
        background: rgba(255, 255, 255, 0.8);
        margin-top: 5px;
        width: 100%;
    }

    /* Popup for the year/month calendar control */
    .calendar-popup {
        position: absolute;
        top: 140px;   /* leave room below the "ðŸ“…" button */
        right: 0;
        background: #fff;
        border: 1px solid #ccc;
        padding: 8px;
        z-index: 1000;
        width: 120%;
    }
    .calendar-popup button {
        margin: 4px;
    }
    .calendar-popup select {
        margin-right: 4px;
    }
    .calendar-popup.hidden {
        display: none !important;
    }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="date-selector">
        <button onclick="setDateRange('all')">All</button>
        <button onclick="setDateRange('last_month')">Last Month</button>
        <button onclick="setDateRange('last_week')">Last Week</button>
        <button onclick="setDateRange('yesterday')">Yesterday</button>
        <button onclick="setDateRange('today')">Today</button>
        <!-- arrow buttons with class="arrow-button" -->
        <button class="arrow-button" title="Move back one day" onclick="adjustDate(-1)">&lt;&lt;</button>
        <div>
            <input type="date" id="start-date"> to 
            <input type="date" id="end-date">
        </div>
        <button class="arrow-button" title="Move forward one day" onclick="adjustDate(1)">&gt;&gt;</button>

        <!-- New "Search" button -->
        <button onclick="manualSearch()">Search</button>
    </div>
    
    <div id="map">
        <div id="loading-spinner" class="loading-spinner"></div>
        <div id="download-percentage" class="loading-spinner-text"></div>
    </div>
</div>

<script>
    var map;
    var polylineLayer;
    var markerLayer;
    var radiusLayer;
    var lastBounds = null;
    var fetchTimeout = null;
    const delay = 500;
    const max_points_for_markers = 300;
    const max_points_for_colored_path = 1000;

    var lastGpsData = [];

    var preventFetch = false;
    var activateFitBounds = false;

    var last_point = {{ last_point }};

    var currentDataIsInterpolated = false;

    // Heatmap-related variables
    var heatLayer = null;
    var heatmapLoaded = false;  // to ensure data is only loaded once
    var heatmapData = [];       // will be filled upon fetch

    var fetchInterpolated = true;
    var accuracyFilter = true;
    var connectFarPoints = true;
    var farThreshold = 10000; // meters
    var showSpeedPolyline = true;

    function initMap() {
        // 1) Check if lat/lng/zoom were provided in the URL
        const params = new URLSearchParams(window.location.search);
        let lat = parseFloat(params.get('lat'));
        let lng = parseFloat(params.get('lng'));
        let zoom = parseInt(params.get('zoom'));

        // Fallback to last_point if missing or invalid
        if (isNaN(lat) || isNaN(lng) || isNaN(zoom)) {
            lat = last_point.lat;
            lng = last_point.lng;
            zoom = 14;
        }

        map = L.map('map').setView([lat, lng], zoom);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors',
            maxZoom: 19,
        }).addTo(map);

        L.control.fullscreen().addTo(map);

        polylineLayer = L.layerGroup().addTo(map);
        markerLayer = L.layerGroup().addTo(map);
        radiusLayer = L.layerGroup().addTo(map);

        // 2) Whenever the map finishes moving or zooming, update the URL & fetch data
        map.on('moveend', () => {
            if (preventFetch) {
                preventFetch = false;
                return;
            }
            updateMapPositionInURL();
            clearTimeout(fetchTimeout);
            if (fetchInterpolated) {
                fetchTimeout = setTimeout(fetchGPSData, delay);
            }
        });
        map.on('zoomend', () => {
            if (preventFetch) {
                return;
            }
            updateMapPositionInURL();
            clearTimeout(fetchTimeout);
            if (fetchInterpolated) {
                fetchTimeout = setTimeout(fetchGPSData, delay);
            }
        });
        map.on('movestart', () => {
            clearTimeout(fetchTimeout);
        });

        // Load the date range from URL if present
        loadDateFromURL();

        // Create the custom calendar control
        createCalendarControl();
    }

    function updateMapPositionInURL() {
        const center = map.getCenter();
        const zoom = map.getZoom();

        const params = new URLSearchParams(window.location.search);
        params.set('lat', center.lat.toFixed(6));
        params.set('lng', center.lng.toFixed(6));
        params.set('zoom', zoom);

        // Keep existing start_date and end_date in place if they exist
        window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);
    }

    function updateURLParams(startDate, endDate) {
        const params = new URLSearchParams(window.location.search);
        params.set('start_date', startDate);
        params.set('end_date', endDate);
        window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);
    }

    function fetchGPSData(forced = false, full_date_range = false) {
        var bounds = map.getBounds();
        if (!bounds) return;

        var zoomLevel = map.getZoom();
        var northEast = bounds.getNorthEast();
        var southWest = bounds.getSouthWest();

        // Skip fetching if the map bounds haven't changed (and not forced)
        if (!forced && lastBounds && ( lastBounds.equals(bounds) || (!currentDataIsInterpolated && lastBounds.contains(bounds.getNorthEast()) && lastBounds.contains(bounds.getSouthWest())) )) {
            if (lastGpsData.length > 0) {
                updateMap(lastGpsData);
            }
            return;
        }


        lastBounds = bounds;

        document.getElementById("loading-spinner").style.display = "block";
        document.getElementById("download-percentage").style.display = "block";
        document.getElementById("download-percentage").innerText = "0%";

        let startDate = document.getElementById("start-date").value;
        let endDate = document.getElementById("end-date").value;

        var body = {
            start_date: startDate,
            end_date: endDate,
            fetch_interpolated: fetchInterpolated,
        };

        if (!full_date_range) {
            body.ne_lat = northEast.lat;
            body.ne_lng = northEast.lng;
            body.sw_lat = southWest.lat;
            body.sw_lng = southWest.lng;
            body.zoom = zoomLevel;
        } else {
            activateFitBounds = true;
        }


        fetch("", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(body)
        })
        .then(response => {
            currentDataIsInterpolated = response.headers.get('Is-Interpolated').toLowerCase() === 'true';
            // Try to get the total bytes from header to track progress.
            const contentLength = response.headers.get('Content-Original-Length');
            if (!contentLength) {
                // Content-Length not provided; fallback to normal JSON parsing.
                return response.json();
            }
            const total = parseInt(contentLength, 10);
            let loaded = 0;
            const reader = response.body.getReader();

            // Create a new readable stream to track the download progress.
            return new Response(new ReadableStream({
                start(controller) {
                    function push() {
                        reader.read().then(({ done, value }) => {
                            if (done) {
                                controller.close();
                                return;
                            }
                            loaded += value.byteLength;
                            const percentage = Math.floor((loaded / total) * 100);
                            // Update the percentage text element.
                            document.getElementById("download-percentage").innerText = percentage + '%';
                            controller.enqueue(value);
                            push();
                        }).catch(error => {
                            console.error("Error reading data:", error);
                            controller.error(error);
                        });
                    }
                    push();
                }
            })).json();
        })
        .then(data => {
            lastGpsData = data;
            updateMap(data);
        })
        .catch(error => console.error("Error fetching GPS data:", error))
        .finally(() => {
            document.getElementById("loading-spinner").style.display = "none";
            document.getElementById("download-percentage").style.display = "none";
            document.getElementById("download-percentage").innerText = "";
        });
    }

    function getCoordinateDistance(lat1, lng1, lat2, lng2) {
        const R = 6371e3; // meters
        const phi1 = lat1 * Math.PI / 180;
        const phi2 = lat2 * Math.PI / 180;
        const deltaPhi = (lat2 - lat1) * Math.PI / 180;
        const deltaLambda = (lng2 - lng1) * Math.PI / 180;

        const a = Math.sin(deltaPhi/2) * Math.sin(deltaPhi/2) +
                  Math.cos(phi1) * Math.cos(phi2) *
                  Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

        return R * c; // in meters
    }

    function updateMap(gpsData) {
        console.log(0);
        polylineLayer.clearLayers();
        if (map.hasLayer(polylineLayer)) {
            console.log(0.5);
            //map.removeLayer(polylineLayer);
        }
        console.log(0.6);
        //polylineLayer = L.layerGroup().addTo(map);

        markerLayer.clearLayers();
        radiusLayer.clearLayers();

        if (gpsData.length === 0) return;

        var coordinates = gpsData.map(record => ({
            id: record.id,
            lat: record.lat,
            lng: record.lng,
            accuracy: record.ha,
            speed: record.s,
            altitude: record.a,
            timestamp: record.t
        }));

        if (accuracyFilter) {
            coordinates = coordinates.filter(coord => coord.accuracy < 20);
        }

        console.log(1);
        if (showSpeedPolyline) {
            for (let i = 0; i < coordinates.length - 1; i++) {
                // Skip if the distance between points is too large
                if (!connectFarPoints) {
                    const dist = getCoordinateDistance(
                        coordinates[i].lat, coordinates[i].lng,
                        coordinates[i + 1].lat, coordinates[i + 1].lng
                    );
                    if (dist > farThreshold) continue; // Skip this segment
                }

                let color = getSpeedColor(coordinates[i].speed || 0);
                L.polyline([coordinates[i], coordinates[i + 1]], {
                    color: color, 
                    weight: 4 
                }).addTo(polylineLayer);
            }
            console.log(2);
        } else if (!connectFarPoints) {
            var cached_points = [];
            for (let i = 0; i < coordinates.length - 1; i++) {
                // Skip if the distance between points is too large
                const dist = getCoordinateDistance(
                    coordinates[i].lat, coordinates[i].lng,
                    coordinates[i + 1].lat, coordinates[i + 1].lng
                );
                if (dist > farThreshold) {
                    // Draw the cached points as a polyline
                    if (cached_points.length > 1) {
                        L.polyline(cached_points.map(coord => [coord.lat, coord.lng]), { 
                            color: "#369eff",
                            fillColor: "#0b84ff",
                            weight: 3
                        }).addTo(polylineLayer);
                    }
                    cached_points = [];
                    continue;
                }
                
                cached_points.push(coordinates[i]);
            }

            // Draw the last segment if there are any cached points
            if (cached_points.length > 1) {
                L.polyline(cached_points.map(coord => [coord.lat, coord.lng]), { 
                    color: "#369eff",
                    fillColor: "#0b84ff",
                    weight: 3
                }).addTo(polylineLayer);
            }
        } else {
            var polyline = L.polyline(coordinates.map(coord => [coord.lat, coord.lng]), { 
                color: "#369eff",
                fillColor: "#0b84ff",
                weight: 3
            }).addTo(polylineLayer);
            console.log(3);
        }

        const center = map.getCenter();
        const centerLat = center.lat;
        const centerLng = center.lng;
        const mapBounds = map.getBounds();

        // Sort so that closest coords to center come first
        var newCoords = coordinates.sort((a, b) => {
            // if outside of bounds, push them later by giving a large 'distance'
            if (!mapBounds.contains([a.lat, a.lng])) return 1;
            const distA = (a.lat - centerLat) ** 2 + (a.lng - centerLng) ** 2;
            const distB = (b.lat - centerLat) ** 2 + (b.lng - centerLng) ** 2;
            return distA - distB;
        });

        // Only take top N for markers
        newCoords = newCoords.slice(0, max_points_for_markers);

        // find coord with last_point.id 
        let selected_point = coordinates.find(coord => coord.id === last_point.id);

        // Add markers if zoomed in enough OR if data set is small
        if (map.getZoom() > 15 || newCoords.length <= 50) {
            // Add circles for accuracy
            newCoords.forEach(coord => {
                // If accuracy is extremely small (e.g. < 5m), skip the circle?
                // Adjust to your preference
                if (coord.accuracy < 5) {
                    return;
                }
                L.circle([coord.lat, coord.lng], {
                    radius: coord.accuracy,
                    color: "blue",
                    weight: 0,
                    opacity: 0,
                    fillOpacity: 0.07
                }).addTo(radiusLayer);
            });

            // Add circleMarkers
            newCoords.forEach(coord => {
                if (selected_point && coord.lat === selected_point.lat && coord.lng === selected_point.lng) {
                    return;
                }
                createMarker(coord, markerLayer);
            });
        }

        // Highlight the selected (last_point) marker if we have it
        if (selected_point) {
            createMarker(selected_point, markerLayer, true);
        }

        // Fit bounds to data if needed
        if (gpsData.length > 0 && activateFitBounds) {
            activateFitBounds = false;
            preventFetch = true;
            var bounds = new L.LatLngBounds(gpsData.map(coord => [coord.lat, coord.lng]));
            map.fitBounds(bounds);
        }
    }

    function hexToRGB(hex) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return { r, g, b };
    }

    const colorStops = [
        { speed: 0, color: '#00ff00' },    // Stationary/very slow (green)
        { speed: 15, color: '#00ffff' },   // Walking/jogging (cyan)
        { speed: 30, color: '#ff00ff' },   // Cycling/slow driving (magenta)
        { speed: 50, color: '#ffff00' },   // Urban driving (yellow)
        { speed: 100, color: '#ff3300' }   // Highway driving (red)
    ].map(stop => ({
        ...stop,
        rgb: hexToRGB(stop.color)
    }));

    function getSpeedColor(speed) {
        let speedKmh = speed * 3.6;

        // Find the appropriate color segment
        for (let i = 1; i < colorStops.length; i++) {
            if (speedKmh <= colorStops[i].speed) {
                const ratio = (speedKmh - colorStops[i-1].speed) / (colorStops[i].speed - colorStops[i-1].speed);
                const color1 = colorStops[i-1].rgb;
                const color2 = colorStops[i].rgb;

                const r = Math.round(color1.r + (color2.r - color1.r) * ratio);
                const g = Math.round(color1.g + (color2.g - color1.g) * ratio);
                const b = Math.round(color1.b + (color2.b - color1.b) * ratio);

                return `rgb(${r}, ${g}, ${b})`;
            }
        }
        return colorStops[colorStops.length - 1].color;
    }

    function createMarker(coord, markerLayer, highlight = false) {
        let marker = L.circleMarker([coord.lat, coord.lng], {
            radius: 5,
            fillColor: highlight ? "red" : "#369eff",
            color: "#c7c7cb",
            weight: 3,
            opacity: 1,
            fillOpacity: 1
        }).addTo(markerLayer);

        marker.bindPopup(`
            <b>Timestamp:</b> ${coord.timestamp} <br>
            <b>Speed:</b> ${coord.speed ? (coord.speed * 3.6).toFixed(2) + " km/h" : "N/A"} <br>
            <b>Altitude:</b> ${coord.altitude ? coord.altitude.toFixed(2) + " m" : "N/A"} <br>
            <b>Accuracy:</b> ${coord.accuracy ? coord.accuracy.toFixed(2) + " m" : "N/A"} <br>
            <button onclick="deletePoint(${coord.id}, this)">Delete</button>
            <button onclick="setDateToPoint('${coord.timestamp}')">Set Date</button>
            <button onclick="goToSpeedMap('${coord.id}')">View on Speed Map</button>
        `);
    }

    function goToSpeedMap(pointId) {
        window.location.href = `/map/speed?point_id=${pointId}`;
    }

    function deletePoint(pointId, button) {
        fetch(`/map?id=${pointId}`, { method: 'DELETE' })
            .then(response => {
                if (response.ok) {
                    map.closePopup();
                    fetchGPSData(true);
                } else {
                    alert("Failed to delete point");
                }
            })
            .catch(error => console.error("Error deleting point:", error));
    }

    function adjustDate(days) {
        let startDateInput = document.getElementById("start-date");
        let endDateInput = document.getElementById("end-date");
        
        let startDate = new Date(startDateInput.value);
        let endDate = new Date(endDateInput.value);
        
        startDate.setDate(startDate.getDate() + days);
        endDate.setDate(endDate.getDate() + days);
        
        startDateInput.value = startDate.toISOString().split('T')[0];
        endDateInput.value = endDate.toISOString().split('T')[0];
        
        updateURLParams(startDateInput.value, endDateInput.value);
        fetchGPSData(true, true);
    }

    function setDateToPoint(timestamp) {
        let date = new Date(timestamp);
        let formattedDate = date.toISOString().split('T')[0];

        document.getElementById("start-date").value = formattedDate;
        document.getElementById("end-date").value = formattedDate;

        updateURLParams(formattedDate, formattedDate);
        fetchGPSData(true);
    }

    function setDateRange(range, fetch_after = true, full_date_range = true) {
        let today = new Date();
        let startDate, endDate;

        if (range === 'today') {
            startDate = endDate = today;
        } else if (range === 'yesterday') {
            today.setDate(today.getDate() - 1);
            startDate = endDate = today;
        } else if (range === 'last_week') {
            startDate = new Date(today);
            startDate.setDate(today.getDate() - 7);
            endDate = today;
        } else if (range === 'last_month') {
            startDate = new Date(today);
            startDate.setMonth(today.getMonth() - 1);
            endDate = today;
        } else if (range === 'all') {
            startDate = new Date(0);
            endDate = today;
        }

        startDate = startDate.toISOString().split('T')[0];
        endDate = endDate.toISOString().split('T')[0];

        document.getElementById("start-date").value = startDate;
        document.getElementById("end-date").value = endDate;

        updateURLParams(startDate, endDate);

        if (fetch_after) {
            fetchGPSData(true, full_date_range);
        }
    }

    // Manually trigger the fetch with the current date values
    function manualSearch() {
        updateURLParams(
            document.getElementById("start-date").value,
            document.getElementById("end-date").value
        );

        fetchGPSData(true, true);
    }

    function loadDateFromURL() {
        const params = new URLSearchParams(window.location.search);
        const startDate = params.get('start_date');
        const endDate = params.get('end_date');

        const prevent_auto_move = (params.get('view_location') === 'true');

        if (startDate && endDate) {
            document.getElementById("start-date").value = startDate;
            document.getElementById("end-date").value = endDate;
            fetchGPSData(true, false);
        } else if (prevent_auto_move) {
            params.delete('view_location');
            window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);
            setDateRange('all', true, false);
        } else {
            setDateRange('today');
        }
    }

    // ------------- HEATMAP TOGGLING -------------
    function toggleHeatmap(checkbox) {
        if (checkbox.checked) {
            // If the heatmap data has not been fetched yet, fetch it
            if (!heatmapLoaded) {
                fetchHeatmapData()
                    .then(() => {
                        // Create the heatLayer once data is available
                        heatLayer = L.heatLayer(heatmapData).addTo(map);
                        heatmapLoaded = true;
                    })
                    .catch(err => console.error("Error fetching heatmap data:", err));
            } else {
                // If already loaded, just add it to the map
                if (heatLayer) {
                    map.addLayer(heatLayer);
                }
            }
        } else {
            // Remove heat layer if it exists
            if (heatLayer) {
                map.removeLayer(heatLayer);
            }
        }
    }

    function toggleFetchInterpolated(checkbox) {
        fetchInterpolated = checkbox.checked;

        showSpeedPolylineElement = document.getElementById("toggleSpeedPolyline");
        if (showSpeedPolylineElement.checked && !fetchInterpolated) {
            // If speed polyline is checked, but interpolated is not, uncheck speed polyline
            showSpeedPolylineElement.checked = false;
            showSpeedPolyline = false;
        }

        fetchGPSData(true);
    }

    function toggleAccuracy(checkbox) {
        accuracyFilter = checkbox.checked;
        fetchGPSData();
    }

    function toggleConnectFarPoints(checkbox) {
        connectFarPoints = checkbox.checked;
        fetchGPSData();
    }

    function toggleSpeedPolyline(checkbox) {
        console.log("test2");
        showSpeedPolyline = checkbox.checked;

        fetchInterpolatedElement = document.getElementById("fetchInterpolated");
        if (!fetchInterpolatedElement.checked && showSpeedPolyline) {
            // If speed polyline is checked, but interpolated is not, check interpolated
            fetchInterpolatedElement.checked = true;
            fetchInterpolated = true;
        }

        fetchGPSData();
    }

    // Fetch the heatmap data (only once)
    function fetchHeatmapData() {
        document.getElementById("loading-spinner").style.display = "block";
        document.getElementById("download-percentage").style.display = "block";
        document.getElementById("download-percentage").innerText = "0%";
        return fetch("/map/heatmap_data.json")
                .then(response => {
                // Try to get the total bytes from header to track progress.
                const contentLength = response.headers.get('Content-Original-Length');
                if (!contentLength) {
                    // Content-Length not provided; fallback to normal JSON parsing.
                    return response.json();
                }
                const total = parseInt(contentLength, 10);
                let loaded = 0;
                const reader = response.body.getReader();

                // Create a new readable stream to track the download progress.
                return new Response(new ReadableStream({
                    start(controller) {
                        function push() {
                            reader.read().then(({ done, value }) => {
                                if (done) {
                                    controller.close();
                                    return;
                                }
                                loaded += value.byteLength;
                                const percentage = Math.floor((loaded / total) * 100);
                                // Update the percentage text element.
                                document.getElementById("download-percentage").innerText = percentage + '%';
                                controller.enqueue(value);
                                push();
                            }).catch(error => {
                                console.error("Error reading data:", error);
                                controller.error(error);
                            });
                        }
                        push();
                    }
                })).json();
            })
            .then(data => {
                heatmapData = data; // store globally
            })
            .finally(() => {
                document.getElementById("loading-spinner").style.display = "none";
                document.getElementById("download-percentage").style.display = "none";
                document.getElementById("download-percentage").innerText = "";
            });
    }

    // ---------------------------------------------
    // Create the custom "ðŸ“…" control in the top-right
    // ---------------------------------------------
    function createCalendarControl() {
        var CalendarControl = L.Control.extend({
            options: { position: 'topright' },
            onAdd: function(map) {
                // Main container
                var container = L.DomUtil.create('div', 'leaflet-control leaflet-bar map-legend');


                // legend
                var legend = L.DomUtil.create('div', '', container);
                legend.innerHTML = `
                    <label>
                        <input 
                            type="checkbox" 
                            id="fetchInterpolated" 
                            onchange="toggleFetchInterpolated(this)" 
                            checked
                        />
                        Interpolated Trace
                    </label>
                    <br>
                    <label>
                        <input 
                            type="checkbox" 
                            id="toggleHeatmap" 
                            onchange="toggleHeatmap(this)" 
                        />
                        Enable Heatmap
                    </label>
                    <br>
                    <label>
                        <input 
                            type="checkbox" 
                            id="toggleAccuracy" 
                            onchange="toggleAccuracy(this)" 
                            checked
                        />
                        Filter Accuracy (< 20m)
                    </label>
                    <br>
                    <label>
                        <input 
                            type="checkbox" 
                            id="toggleAccuracy" 
                            onchange="toggleConnectFarPoints(this)" 
                            checked
                        />
                        Connect Far Points
                    </label>
                    <br>
                    <label>
                        <input 
                            type="checkbox" 
                            id="toggleSpeedPolyline" 
                            onchange="toggleSpeedPolyline(this)" 
                            checked
                        />
                        Speed Colors
                    </label>
                `;



                
                // Toggle button
                var toggleBtn = L.DomUtil.create('button', 'calendar-popup-button', container);
                toggleBtn.innerHTML = 'ðŸ“…';
                toggleBtn.title = 'Select Year/Month';

                // Popup
                var popup = L.DomUtil.create('div', 'calendar-popup hidden', container);

                // Year selection
                var yearSelect = L.DomUtil.create('select', '', popup);
                var currentYear = new Date().getFullYear();
                for (var y = currentYear; y >= {{ earliest_year }}; y--) {
                    var option = L.DomUtil.create('option', '', yearSelect);
                    option.value = y;
                    option.textContent = y;
                }

                // "Whole year" button
                var wholeYearBtn = L.DomUtil.create('button', '', popup);
                wholeYearBtn.innerHTML = 'Whole year';
                wholeYearBtn.onclick = function() {
                    var y = parseInt(yearSelect.value);
                    var startDate = y + '-01-01';
                    var endDate = y + '-12-31';
                    document.getElementById('start-date').value = startDate;
                    document.getElementById('end-date').value = endDate;
                    updateURLParams(startDate, endDate);
                    fetchGPSData(true, true);
                };

                // Month buttons (3 columns, 4 rows)
                var monthsContainer = L.DomUtil.create('div', '', popup);
                monthsContainer.style.display = 'grid';
                monthsContainer.style.gridTemplateColumns = 'repeat(3, auto)';
                monthsContainer.style.gap = '4px';

                var monthNames = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
                for (let m = 1; m <= 12; m++) {
                    let btn = L.DomUtil.create('button', '', monthsContainer);
                    btn.innerHTML = monthNames[m-1];
                    btn.onclick = function() {
                        var y = parseInt(yearSelect.value);
                        var mm = String(m).padStart(2, '0');
                        // Start = Y-mm-01, End = last day of that month
                        var startDate = y + '-' + mm + '-01';
                        var lastDay = new Date(y, m, 0).getDate(); // last day of month
                        var endDate = y + '-' + mm + '-' + lastDay;
                        document.getElementById('start-date').value = startDate;
                        document.getElementById('end-date').value = endDate;
                        updateURLParams(startDate, endDate);
                        fetchGPSData(true, true);
                    };
                }

                // Toggle popup visibility
                toggleBtn.onclick = function() {
                    popup.classList.toggle('hidden');
                };

                // Prevent clicks on the control from propagating to the map
                L.DomEvent.disableClickPropagation(container);

                return container;
            }
        });

        map.addControl(new CalendarControl());
    }

    document.addEventListener("DOMContentLoaded", initMap);
</script>
{% endblock %}
