{% extends "base.jinja" %}

{% block heading %}
GPS Map
{% endblock %}

{% block content %}

<!-- Leaflet.js CSS & JS -->
<link rel="stylesheet" href="/static/css/leaflet.css" />
<script src="/static/js/leaflet.js"></script>

<style>
    #map {
        height: 600px;
        width: 100%;
    }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        display: none;
        z-index: 1000;
    }

    @keyframes spin {
        0% {
            transform: translate(-50%, -50%) rotate(0deg);
        }

        100% {
            transform: translate(-50%, -50%) rotate(360deg);
        }
    }
</style>

<div class="container mt-4">
    <div id="map">
        <div id="loading-spinner" class="loading-spinner"></div>
    </div>
</div>

<script>
    var map;
    var polylineLayer;
    var markerLayer;
    var lastBounds = null;
    var fetchTimeout = null;
    var delay = 500;

    function initMap() {
        map = L.map('map').setView([{{ last_point.latitude }}, {{ last_point.longitude }}], 10);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors',
        maxZoom: 19,
    }).addTo(map);

    polylineLayer = L.layerGroup().addTo(map);
    markerLayer = L.layerGroup().addTo(map);

    map.on('movestart', () => clearTimeout(fetchTimeout));
    map.on('moveend', () => fetchTimeout = setTimeout(fetchGPSData, delay));

    fetchGPSData();
    }

    function fetchGPSData(forced = false) {
        var bounds = map.getBounds();
        if (!bounds) return;

        var zoomLevel = map.getZoom();
        var northEast = bounds.getNorthEast();
        var southWest = bounds.getSouthWest();

        if (!forced && lastBounds && lastBounds.equals(bounds)) return;
        lastBounds = bounds;

        var url = `/gps_data?ne_lat=${northEast.lat}&ne_lng=${northEast.lng}&sw_lat=${southWest.lat}&sw_lng=${southWest.lng}&zoom=${zoomLevel}`;

        document.getElementById("loading-spinner").style.display = "block";

        fetch(url)
            .then(response => response.json())
            .then(data => updateMap(data))
            .catch(error => console.error("Error fetching GPS data:", error))
            .finally(() => document.getElementById("loading-spinner").style.display = "none");
    }

    function updateMap(gpsData) {
        polylineLayer.clearLayers();
        markerLayer.clearLayers();

        if (gpsData.length === 0) return;

        var coordinates = gpsData.map(record => ({
            id: record.id,
            lat: record.lat,
            lng: record.lon,
            speed: record.s,
            altitude: record.a,
            timestamp: record.t
        }));

        for (let i = 0; i < coordinates.length - 1; i++) {
            let color = getSpeedColor(coordinates[i].speed || 0);
            L.polyline([coordinates[i], coordinates[i + 1]], { color: color, weight: 4 }).addTo(polylineLayer);
        }

        if (map.getZoom() > 16) {
            coordinates.forEach(coord => {
                let marker = L.circleMarker([coord.lat, coord.lng], {
                    radius: 5,
                    fillColor: "black",
                    color: "white",
                    weight: 1,
                    opacity: 1,
                    fillOpacity: 0.7
                }).addTo(markerLayer);

                marker.bindPopup(`
                <b>Timestamp:</b> ${coord.timestamp} <br>
                <b>Speed:</b> ${coord.speed ? (coord.speed * 3.6).toFixed(2) + " km/h" : "N/A"} <br>
                <b>Altitude:</b> ${coord.altitude ? coord.altitude.toFixed(2) + " m" : "N/A"} <br>
                <button onclick="deletePoint(${coord.id}, this)">Delete</button>
            `);
            });
        }

        if (!lastBounds) {
            map.setView([coordinates[0].lat, coordinates[0].lng], 12);
        }
    }

    function getSpeedColor(speed) {
        let kph = speed * 3.6;
        let hue = Math.max(0, Math.min(120 - (kph / 200) * 120, 120));
        return `hsl(${hue}, 100%, 50%)`;
    }

    function deletePoint(pointId, button) {
        fetch(`/delete_point?id=${pointId}`, { method: 'DELETE' })
            .then(response => {
                if (response.ok) {
                    // remove all popups
                    map.closePopup();
                    fetchGPSData(true);
                } else {
                    alert("Failed to delete point");
                }
            })
            .catch(error => console.error("Error deleting point:", error));
    }

    document.addEventListener("DOMContentLoaded", initMap);
</script>

{% endblock %}