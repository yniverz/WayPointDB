{% extends "base.jinja" %}

{% block heading %}
Speed Map
{% endblock %}

{% block head %}
<!-- Leaflet -->
<link rel="stylesheet" href="/static/third_party/css/leaflet.css" />
<script src="/static/third_party/js/leaflet.js"></script>
<script src="/static/third_party/js/leaflet-heat.js"></script>

<!-- Highcharts (with broken‑axis) -->
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/broken-axis.js"></script>

<style>
    #map            { height:400px; width:100%; position:relative; }
    .loading-spinner{ position:absolute; top:50%; left:50%; transform:translate(-50%,-50%);
                      border:5px solid rgba(255,255,255,.3); border-top:5px solid #3498db;
                      border-radius:50%; width:40px; height:40px; animation:spin 1s linear infinite;
                      display:none;   z-index:1000; }
    @keyframes spin { 0%{transform:translate(-50%,-50%) rotate(0deg);}
                       100%{transform:translate(-50%,-50%) rotate(360deg);} }
    .date-selector  { margin-bottom:10px; display:flex; flex-wrap:wrap; gap:10px;
                      align-items:center; justify-content:center; }
    .date-selector input{ flex:1 1 auto; min-width:100px; }
    #chart-container{ margin-top:20px; }
</style>
{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="date-selector">
        <input type="date" id="date">
        <input type="time" id="time">
    </div>

    <div id="map"><div id="loading-spinner" class="loading-spinner"></div></div>

    <div id="chart-container"><div id="speedChart" style="height:300px;"></div></div>
</div>

<script>
/* ----------------------- Globals ----------------------- */
let map, polylineLayer, markerLayer, radiusLayer;
let gpsCoordinates = [];
let selectedPointID = null;
let speedChart;
const default_map_zoom = 16;

/* ----------------------- Map init ---------------------- */
function initMap(){
    const p = new URLSearchParams(location.search);
    const lat = parseFloat(p.get('lat')) || {{ latitude }};
    const lng = parseFloat(p.get('lng')) || {{ longitude }};
    const z   = parseInt  (p.get('zoom'))|| default_map_zoom;

    map = L.map('map').setView([lat,lng], z);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
        { attribution:'&copy; OpenStreetMap', maxZoom:19 }).addTo(map);
    if (L.control.fullscreen) L.control.fullscreen().addTo(map);

    polylineLayer = L.layerGroup().addTo(map);
    markerLayer   = L.layerGroup().addTo(map);
    radiusLayer   = L.layerGroup().addTo(map);

    map.on('moveend', updateMapPositionInURL);
    updateFromURL();
}
function updateMapPositionInURL(){
    const c = map.getCenter(), p = new URLSearchParams(location.search);
    p.set('lat',c.lat.toFixed(6)); p.set('lng',c.lng.toFixed(6));
    p.set('zoom',map.getZoom()); history.replaceState({},'',`${location.pathname}?${p}`);
}

/* --------------------- URL helpers --------------------- */
function updateFromURL(){
    const p = new URLSearchParams(location.search);
    let date = p.get('date'), time = p.get('time');
    if (!date || !time){
        const now = new Date();
        date = now.toISOString().split('T')[0];
        time = now.toISOString().split('T')[1].split('.')[0];
    }
    selectedPointID = p.get('point_id') || null;
    dateInput.value = date; timeInput.value = time;
    fetchGPSData();
}
function updateURLParams(d,t){
    const p = new URLSearchParams(location.search);
    if (selectedPointID){ p.set('point_id',selectedPointID); p.delete('date'); p.delete('time'); }
    else { p.set('date',d); p.set('time',t); p.delete('point_id'); }
    history.replaceState({},'',`${location.pathname}?${p}`);
}

/* -------------------- Data fetch ----------------------- */
function fetchGPSData(){
    spinner.style.display='block';
    const body = selectedPointID ? {point_id:selectedPointID}
              : {date:dateInput.value,time:timeInput.value};
    fetch('',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)})
     .then(r=>r.json()).then(updatePoints)
     .catch(e=>console.error('Fetch error',e))
     .finally(()=>spinner.style.display='none');
}

/* ------------------ Map / Chart draw ------------------- */
function updatePoints(raw){
    polylineLayer.clearLayers(); markerLayer.clearLayers(); radiusLayer.clearLayers();
    if(!raw.length){ gpsCoordinates=[]; if(speedChart) speedChart.series[0].setData([]); return; }

    gpsCoordinates = raw.map(r=>({id:r.id,lat:r.lat,lng:r.lng,accuracy:r.ha,
                                  speed:r.s,altitude:r.a,timestamp:r.t}));

    // polylines colour‑coded by speed
    for(let i=0;i<gpsCoordinates.length-1;i++){
        L.polyline([[gpsCoordinates[i].lat,gpsCoordinates[i].lng],
                    [gpsCoordinates[i+1].lat,gpsCoordinates[i+1].lng]],
                   {color:getSpeedColor(gpsCoordinates[i].speed||0),weight:2})
         .addTo(polylineLayer);
    }
    // accuracy circles
    gpsCoordinates.forEach(c=>{
        if(c.accuracy>=5)
            L.circle([c.lat,c.lng],{radius:c.accuracy,color:'blue',weight:0,
                                     opacity:0,fillOpacity:.07}).addTo(radiusLayer);
    });

    updateSpeedChart();

    if(!selectedPointID && gpsCoordinates.length)
         updateSelectedPoint(gpsCoordinates[Math.floor(gpsCoordinates.length/2)].id);
    else if(selectedPointID) updateSelectedPoint(selectedPointID);
}

/* -------------------- Selection sync ------------------- */
function updateSelectedPoint(id){
    selectedPointID=id;
    const pt=gpsCoordinates.find(p=>p.id==id); if(!pt) return;

    // map marker
    markerLayer.clearLayers();


    // convert timestamp iso to local date
    let date = new Date(pt.timestamp);
    let formattedDate = date.toLocaleString('en-US', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });

    L.circleMarker([pt.lat,pt.lng],
        {radius:6,fillColor:'#0b84ff',color:'#c7c7cb',weight:3,fillOpacity:1})
      .addTo(markerLayer)
      .bindPopup(`<b>Timestamp:</b> ${formattedDate}<br>
                  <b>Speed:</b> ${pt.speed?(pt.speed*3.6).toFixed(2)+' km/h':'N/A'}<br>
                  <b>Altitude:</b> ${pt.altitude?pt.altitude.toFixed(2)+' m':'N/A'}<br>
                  <b>Accuracy:</b> ${pt.accuracy?pt.accuracy.toFixed(2)+' m':'N/A'}<br>
                  <button onclick=\"viewOnRealMap('${pt.id}')\">View on Map</button>`);
    map.setView([pt.lat,pt.lng],default_map_zoom);

    // update form + URL
    const d=new Date(pt.timestamp);
    dateInput.value=d.toISOString().split('T')[0];
    timeInput.value=d.toISOString().split('T')[1].split('.')[0];
    updateURLParams(dateInput.value,timeInput.value);

    // highlight point + red line on chart
    if(speedChart){
        speedChart.series[0].points.forEach(p=>p.select(false,false));
        const chartPt=speedChart.series[0].points.find(p=>p.id==id);
        if(chartPt) chartPt.select(true,false);
        speedChart.xAxis[0].removePlotLine('selected');
        speedChart.xAxis[0].addPlotLine({id:'selected',color:'red',width:2,
                                         value:Date.parse(pt.timestamp)});
    }

    // pagination
    const idx=gpsCoordinates.findIndex(c=>c.id==id);
    if(idx<10||idx>gpsCoordinates.length-10) fetchGPSData();
}

/* -------------------- Colour scale --------------------- */
const colorStops=[
 {speed:0,color:'#00ff00'},{speed:15,color:'#00ffff'},
 {speed:30,color:'#ff00ff'},{speed:50,color:'#ffff00'},
 {speed:100,color:'#ff3300'}];
colorStops.forEach(s=>s.rgb={
  r:parseInt(s.color.slice(1,3),16),
  g:parseInt(s.color.slice(3,5),16),
  b:parseInt(s.color.slice(5,7),16)});
function getSpeedColor(s){
  const kmh=s*3.6;
  for(let i=1;i<colorStops.length;i++){
    if(kmh<=colorStops[i].speed){
      const f=(kmh-colorStops[i-1].speed)/(colorStops[i].speed-colorStops[i-1].speed);
      const c1=colorStops[i-1].rgb,c2=colorStops[i].rgb;
      return `rgb(${Math.round(c1.r+(c2.r-c1.r)*f)},
                  ${Math.round(c1.g+(c2.g-c1.g)*f)},
                  ${Math.round(c1.b+(c2.b-c1.b)*f)})`;
    }}
  return colorStops[colorStops.length-1].color;
}

/* ------------------- Highcharts ----------------------- */
function initSpeedChart(){
  speedChart=Highcharts.chart('speedChart',{
    chart:{ backgroundColor:'transparent',
            zoomType:'x',
            panning:{enabled:true,type:'x',modifierKey:'ctrl'}},
    title:{text:null},
    xAxis:{type:'datetime',breaks:[],plotLines:[
        {id:'selected',color:'red',width:2,value:0}]},
    yAxis:{title:{text:'Speed (km/h)'}},
    tooltip:{xDateFormat:'%Y-%m-%d %H:%M:%S',valueSuffix:' km/h'},
    plotOptions:{series:{
        connectNulls:false, turboThreshold:0, allowPointSelect:true,
        marker:{radius:4,states:{select:{fillColor:'#ff0000',lineColor:'#000',lineWidth:1}}},
        point:{events:{click:function(){
            this.series.points.forEach(p=>p.select(false,false));
            this.select(true,false); updateSelectedPoint(this.id);}}}}},
    series:[{name:'Speed',data:[]}]
  });
}

/* ---------- gap compression + null breaks ------------- */
function updateSpeedChart(){
  if(!speedChart) return;
  const MAX_GAP=3*60*1000, BREAK_SIZE=5*60*1000;
  const data=[], gaps=[]; let prev=null;
  gpsCoordinates.forEach(pt=>{
    const t=Date.parse(pt.timestamp),
          y=pt.speed?+(pt.speed*3.6).toFixed(2):null;
    if(prev && t-prev>MAX_GAP){
        gaps.push({from:prev,to:t-1,breakSize:BREAK_SIZE});
        data.push({x:prev+1,y:null});          // disconnect line
    }
    data.push({x:t,y:y,id:pt.id});
    prev=t;
  });
  speedChart.series[0].setData(data,false);
  speedChart.xAxis[0].update({breaks:gaps},false);

  // refresh red line
  const sel=gpsCoordinates.find(c=>c.id==selectedPointID);
  speedChart.xAxis[0].removePlotLine('selected');
  if(sel) speedChart.xAxis[0].addPlotLine({id:'selected',color:'red',width:2,
                                           value:Date.parse(sel.timestamp)});
  speedChart.redraw();
}

/* --------------------- Boot --------------------------- */
const dateInput=document.getElementById('date');
const timeInput=document.getElementById('time');
const spinner  =document.getElementById('loading-spinner');

document.addEventListener('DOMContentLoaded',()=>{initMap();initSpeedChart();});
dateInput.addEventListener('change',()=>{updateURLParams(dateInput.value,timeInput.value);fetchGPSData();});
timeInput.addEventListener('change',()=>{updateURLParams(dateInput.value,timeInput.value);fetchGPSData();});

function viewOnRealMap(id){
  const d=dateInput.value;
  location.href=`/map?point_id=${id}&start_date=${d}&end_date=${d}`;
}
</script>
{% endblock %}