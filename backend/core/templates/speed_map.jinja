{% extends "base.jinja" %}

{% block heading %}
Speed Map
{% endblock %}

{% block head %}
<!-- Leaflet.js CSS & JS -->
<link rel="stylesheet" href="/static/css/leaflet.css" />
<script src="/static/js/leaflet.js"></script>
<script src="/static/js/leaflet-heat.js"></script>

<!-- Chart.js and Annotation Plugin (loaded from CDN) -->
<script src="/static/js/chart.js"></script>
<script src="/static/js/chartjs-plugin-annotation@3.0.1.js"></script>

<style>
    /* Reduced map height */
    #map {
        height: 400px;
        width: 100%;
        position: relative;
    }

    .loading-spinner {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border: 5px solid rgba(255, 255, 255, 0.3);
        border-top: 5px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        display: none;
        z-index: 1000;
    }

    @keyframes spin {
        0% { transform: translate(-50%, -50%) rotate(0deg); }
        100% { transform: translate(-50%, -50%) rotate(360deg); }
    }

    .date-selector {
        margin-bottom: 10px;
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }
    .date-selector button, .date-selector input {
        flex: 1 1 auto;
        min-width: 100px;
    }

    /* Simple "legend" or control area in the top-right corner */
    .map-legend {
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 999;
        color: #333;
        background: rgba(255, 255, 255, 0.8);
        padding: 8px 12px;
        border-radius: 4px;
    }

    /* Chart container styling */
    #chart-container {
        margin-top: 20px;
    }
</style>
{% endblock %}

{% block content %}

<div class="container mt-4">
    <div class="date-selector">
        <input type="date" id="date">
        <input type="time" id="time">
    </div>
    
    <div id="map">
        <div id="loading-spinner" class="loading-spinner"></div>
    </div>

    <!-- Speed Chart Canvas -->
    <div id="chart-container">
        <canvas id="speedChart"></canvas>
    </div>
</div>

<script>
    var map;
    var polylineLayer;
    var markerLayer;
    var radiusLayer;
    var gpsCoordinates = [];  // Global storage for GPS records
    var speedChart;           // Chart.js chart instance

    var selectedPointID = null;

    const default_map_zoom = 16;

    function initMap() {
        // 1) Check if lat/lng/zoom were provided in the URL
        const params = new URLSearchParams(window.location.search);
        // Use provided latitude/longitude or fallback to template variables
        let lat = parseFloat(params.get('lat')) || {{ latitude }};
        let lng = parseFloat(params.get('lng')) || {{ longitude }};
        let zoom = parseInt(params.get('zoom')) || default_map_zoom;

        map = L.map('map').setView([lat, lng], zoom);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors',
            maxZoom: 19,
        }).addTo(map);

        if (L.control.fullscreen) {
            L.control.fullscreen().addTo(map);
        }

        polylineLayer = L.layerGroup().addTo(map);
        markerLayer = L.layerGroup().addTo(map);
        radiusLayer = L.layerGroup().addTo(map);

        map.on('moveend', updateMapPositionInURL);

        updateFromURL();
    }

    function updateFromURL() {
        // if set, use the date and time from the URL
        const params = new URLSearchParams(window.location.search);
        let date = params.get('date');
        let time = params.get('time');
        let point_id = params.get('point_id');

        if (!date || !time) {
            // if not set, use the current date and time
            let now = new Date();
            date = now.toISOString().split('T')[0];
            time = now.toISOString().split('T')[1].split('.')[0];
        }
        if (point_id) {
            selectedPointID = point_id;
        }

        document.getElementById("date").value = date;
        document.getElementById("time").value = time;

        fetchGPSData();
    }

    function updateMapPosition() {
        if (!selectedPointID) { return; }

        const point = gpsCoordinates.find(coord => coord.id == selectedPointID);
        if (!point) { return; }

        map.setView([point.lat, point.lng], default_map_zoom);
    }

    function updateMapPositionInURL() {
        const center = map.getCenter();
        const zoom = map.getZoom();

        const params = new URLSearchParams(window.location.search);
        params.set('lat', center.lat.toFixed(6));
        params.set('lng', center.lng.toFixed(6));
        params.set('zoom', zoom);

        // Keep existing start_date and end_date, etc.
        window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);
    }

    function updateURLParams(date, time) {
        const params = new URLSearchParams(window.location.search);
        if (selectedPointID) {
            params.set('point_id', selectedPointID);
            params.delete('date');
            params.delete('time');
        } else {
            params.set('date', date);
            params.set('time', time);
            params.delete('point_id');
        }
        window.history.replaceState({}, '', `${window.location.pathname}?${params.toString()}`);
    }

    function fetchGPSData() {
        document.getElementById("loading-spinner").style.display = "block";

        let date = document.getElementById("date").value;
        let time = document.getElementById("time").value;

        var body = {};

        if (selectedPointID) {
            body.point_id = selectedPointID;
        } else {
            body.date = date;
            body.time = time;
        }

        fetch("", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(body)
        })
        .then(response => response.json())
        .then(data => updatePoints(data))
        .catch(error => console.error("Error fetching GPS data:", error))
        .finally(() => document.getElementById("loading-spinner").style.display = "none");
    }

    function updatePoints(gpsData) {
        polylineLayer.clearLayers();
        markerLayer.clearLayers();
        radiusLayer.clearLayers();

        if (gpsData.length === 0) {
            gpsCoordinates = [];
            if (speedChart) {
                speedChart.data.labels = [];
                speedChart.data.datasets[0].data = [];
                speedChart.update();
            }
            return;
        }

        // Map the gpsData to a consistent structure and store globally
        gpsCoordinates = gpsData.map(record => ({
            id: record.id,
            lat: record.lat,
            lng: record.lng,
            accuracy: record.ha,
            speed: record.s,         // speed in m/s
            altitude: record.a,
            timestamp: record.t
        }));

        // Draw polylines between consecutive points
        for (let i = 0; i < gpsCoordinates.length - 1; i++) {
            let color = getSpeedColor(gpsCoordinates[i].speed || 0);
            L.polyline(
                [
                    [gpsCoordinates[i].lat, gpsCoordinates[i].lng],
                    [gpsCoordinates[i + 1].lat, gpsCoordinates[i + 1].lng]
                ],
                { 
                    color: color,
                    weight: 2
                }
            ).addTo(polylineLayer);
        }

        // Draw accuracy circles
        gpsCoordinates.forEach(coord => {
            if (coord.accuracy < 5) {
                return;
            }
            L.circle([coord.lat, coord.lng], {
                radius: coord.accuracy,
                color: "blue",
                weight: 0,
                opacity: 0,
                fillOpacity: 0.07
            }).addTo(radiusLayer);
        });

        // Update the speed chart with new data
        updateSpeedChart();

        // set id to middle of the array
        if (gpsCoordinates.length > 0 && !selectedPointID) {
            updateSelectedPoint(gpsCoordinates[Math.floor(gpsCoordinates.length / 2)].id);
        } else if (selectedPointID) {
            updateSelectedPoint(selectedPointID);
        }
    }

    function updateSelectedPoint(pointID) {
        selectedPointID = pointID;

        // Find the corresponding point in the global gpsCoordinates
        const point = gpsCoordinates.find(coord => coord.id == pointID);
        if (!point) return;

        // Clear previous markers and add a new marker for the selected point
        markerLayer.clearLayers();
        let marker = L.circleMarker([point.lat, point.lng], {
            radius: 5,
            fillColor: "#0b84ff",
            color: "#c7c7cb",
            weight: 3,
            opacity: 1,
            fillOpacity: 1
        }).addTo(markerLayer);

        marker.bindPopup(`
            <b>Timestamp:</b> ${point.timestamp} <br>
            <b>Speed:</b> ${point.speed ? (point.speed * 3.6).toFixed(2) + " km/h" : "N/A"} <br>
            <b>Altitude:</b> ${point.altitude ? point.altitude.toFixed(2) + " m" : "N/A"} <br>
            <b>Accuracy:</b> ${point.accuracy.toFixed(2)} m <br>
            <button onclick="viewOnRealMap('${point.id}')">View on Map</button>
        `);

        updateMapPosition();
        setDateToPoint(point.timestamp);

        // if selected point is closer than 10 points to either end, refetch data
        let index = gpsCoordinates.findIndex(coord => coord.id == pointID);
        if (index < 10 || index > gpsCoordinates.length - 10) {
            fetchGPSData();
        }
    }

    function viewOnRealMap(pointID) {
        window.location.href = `/map?point_id=${pointID}&start_date=${document.getElementById("date").value}&end_date=${document.getElementById("date").value}`;
    }

    function setDateToPoint(timestamp) {
        let date = new Date(timestamp);
        let formattedDate = date.toISOString().split('T')[0];
        let formattedTime = date.toISOString().split('T')[1].split('.')[0];

        document.getElementById("date").value = formattedDate;
        document.getElementById("time").value = formattedTime;

        updateURLParams(formattedDate, formattedTime);
    }

    function hexToRGB(hex) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return { r, g, b };
    }

    const colorStops = [
        { speed: 0, color: '#00ff00' },    // Stationary/very slow (green)
        { speed: 15, color: '#00ffff' },   // Walking/jogging (cyan)
        { speed: 30, color: '#ff00ff' },   // Cycling/slow driving (magenta)
        { speed: 50, color: '#ffff00' },   // Urban driving (yellow)
        { speed: 100, color: '#ff3300' }   // Highway driving (red)
    ].map(stop => ({
        ...stop,
        rgb: hexToRGB(stop.color)
    }));

    function getSpeedColor(speed) {
        let speedKmh = speed * 3.6;

        // Find the appropriate color segment
        for (let i = 1; i < colorStops.length; i++) {
            if (speedKmh <= colorStops[i].speed) {
                const ratio = (speedKmh - colorStops[i-1].speed) / (colorStops[i].speed - colorStops[i-1].speed);
                const color1 = colorStops[i-1].rgb;
                const color2 = colorStops[i].rgb;

                const r = Math.round(color1.r + (color2.r - color1.r) * ratio);
                const g = Math.round(color1.g + (color2.g - color1.g) * ratio);
                const b = Math.round(color1.b + (color2.b - color1.b) * ratio);

                return `rgb(${r}, ${g}, ${b})`;
            }
        }
        return colorStops[colorStops.length - 1].color;
    }

    function loadFromURL() {
        const params = new URLSearchParams(window.location.search);
        const date = params.get('date');
        const time = params.get('time');
        const point_id = params.get('point_id');

        if (date && time) {
            document.getElementById("date").value = date;
            document.getElementById("time").value = time;
        }
        if (point_id) {
            selectedPointID = point_id;
        }

        fetchGPSData();
    }

    /* -------------------- Chart Code -------------------- */

    function initSpeedChart() {
        const ctx = document.getElementById('speedChart').getContext('2d');
        speedChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],   // Will be set to indices (or timestamps)
                datasets: [{
                    label: 'Speed (km/h)',
                    data: [],
                    borderColor: '#0b84ff',
                    fill: false,
                    pointRadius: 3,
                    pointHoverRadius: 6,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                animation: false,
                scales: {
                    x: {
                        display: false,
                        title: { display: true, text: 'Data Point' }
                    },
                    y: {
                        display: true,
                        title: { display: true, text: 'Speed (km/h)' }
                    }
                },
                plugins: {
                    annotation: {
                        annotations: {
                            verticalLine: {
                                type: 'line',
                                mode: 'vertical',
                                scaleID: 'x',
                                value: 0, // Initial position
                                borderColor: 'red',
                                borderWidth: 2,
                                label: {
                                    enabled: true,
                                    content: 'Selected'
                                }
                            }
                        }
                    }
                },
                // Capture click events on the chart
                onClick: (evt, elements) => {
                    // Use the event's position to get the nearest data index
                    const points = speedChart.getElementsAtEventForMode(evt, 'nearest', { intersect: true }, true);
                    if (points.length) {
                        const index = points[0].index;
                        // Update the vertical line annotation position
                        speedChart.options.plugins.annotation.annotations.verticalLine.value = index;
                        speedChart.update();
                        // Update the selected point on the map
                        const pointID = gpsCoordinates[index].id;
                        updateSelectedPoint(pointID);
                    }
                }
            }
        });
    }

    // Update chart data based on gpsCoordinates
    function updateSpeedChart() {
        if (!speedChart) return;

        const labels = gpsCoordinates.map(record => record.timestamp.split('T')[1]); // Extract time
        const data = gpsCoordinates.map(record => (record.speed * 3.6).toFixed(2)); // Convert m/s to km/h
        speedChart.data.labels = labels;
        speedChart.data.datasets[0].data = data;
        // Reset the vertical annotation to the first point if needed
        {# speedChart.options.plugins.annotation.annotations.verticalLine.value = 0; #}

        speedChart.options.plugins.annotation.annotations.verticalLine.value = gpsCoordinates.findIndex(coord => coord.id == selectedPointID);
        speedChart.update();
    }

    /* ------------------ End Chart Code ------------------ */

    document.addEventListener("DOMContentLoaded", function() {
        initMap();
        initSpeedChart();
    });

    function dateTimeChanged() {
        updateURLParams(document.getElementById("date").value, document.getElementById("time").value);
        fetchGPSData();
    }

    // if date or time is changed, update the URL and fetch new data
    document.getElementById("date").addEventListener("change", function() {
        dateTimeChanged();
    });

    document.getElementById("time").addEventListener("change", function() {
        dateTimeChanged();
    });
</script>

{% endblock %}
